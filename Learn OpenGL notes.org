*** OpenGL是什么？
    - 由Khronos组织制定并维护的关于图形图像操作的规范，一般实现都是显卡生产商;
    - 模式, 早期OpenGL使用立即渲染模式(Immediate mode)，细节隐藏，使用简单，但缺乏灵活性，从OpenGL3.2开始，规范文档开始废弃立即渲染模式，
      鼓励使用核心模式(Core-profile), 核心模式使用现代的函数，具有更高的灵活性和效率;
    - 扩展, OpenGL的一大特性是支持扩展(Extension)，当一个显卡公司提出新特性或渲染优化，通常以扩展的方式在驱动中实现，开发者使用时判断是否有
      此特性，通常一个扩展流行后，它很有可能会成为规范的一部分;
    - 状态机, OpenGL自身是一个巨大的状态机：有一系列的变量描述OpenGL此刻应当如何运行。OpenGL的状态通常被称为OpenGL上下文(Context)。我们通常
      使用如下路径去更改OpenGL状态：设置选项，操作缓冲。最后使用当前OpenGL上下文来渲染;
*** cmake
    - 用于简洁的语句生成各个平台编译使用的makefile或project文件，使用CMakeLists.txt产生标准的构建档(Unix的makefile或Windows 的sln)
*** GLFW
    - OpenGL的封装，允许用户创建OpenGL上下文，创建窗口，处理用户输入等功能
*** GLAD
    - 由于OpenGL版本众多，编译时无法知道函数位置，需要运行时查询，GLAD就是一个提供运行时获取函数地址的库
    - 一般获取函数的代码：
      // 定义函数原型
      typedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);
      // 找到正确的函数并赋值给函数指针
      GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress("glGenBuffers");
      // 现在函数可以被正常调用了
      GLuint buffer;
      glGenBuffers(1, &buffer);
*** 基本绘制流程
    1. 创建窗口
       glfwInit();
       glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); // opengl版本3.3
       glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
       glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); // 使用核心模式
       GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
       if (window == NULL)
       {
         std::cout << "Failed to create GLFW window" << std::endl;
         glfwTerminate();
         return -1;
       }
       glfwMakeContextCurrent(window);
    2. 管理OpenGL函数指针
       if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
       {
         std::cout << "Failed to initialize GLAD" << std::endl;
         return -1;
       }
    3. 设置视口，OpenGL将(-1, 1)x(-1, 1)映射到屏幕坐标(0, width)x(0, height)
       - glViewport(0, 0, width, height);
    4. 窗口循环
       // 渲染循环
       while(!glfwWindowShouldClose(window))
       {
         // 输入
         processInput(window);
     
         // 渲染指令
         ...
     
         // 检查并调用事件，交换缓冲
         glfwPollEvents();
         glfwSwapBuffers(window);
       }
       glfwTerminate();
*** OpenGL图形管线
    - http://www.songho.ca/opengl/gl_pipeline.html
*** 基本渲染流程
    1. 创建至少一个顶点着色器和一个片段着色器，编译链接着色器程序;
    2. 链接顶点属性，创建缓冲，写入数据，链接顶点属性index和内存读取规则;
    3. 绘制图形
*** 着色器
    1. 顶点着色器, 一个顶点数据作为输入，应用GL_MODELVIEW矩阵
       #version 330 core
       layout (location = 0) in vec3 aPos;   // 位置变量的属性位置值为 0 
       layout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为 1
          
       out vec3 ourColor; // 向片段着色器输出一个颜色
          
       void main()
       {
         gl_Position = vec4(aPos, 1.0);
	 ourColor = aColor; // 将ourColor设置为我们从顶点数据那里得到的输入颜色
       }
    2. 片段着色器, 给每个像素上色
       #version 330 core
       out vec4 FragColor;  
       in vec3 ourColor;
          
       void main()
       {
         FragColor = vec4(ourColor, 1.0);
       }
