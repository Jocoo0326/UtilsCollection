
* Java平台的特点
** Java平台的诞生解决了当时的一些痛点：
   - 对不同的平台，代码需要适配，然后编译对应的包
   - 内存的使用，分配和回收是一个非常棘手的问题，而且难于排查
   - 工程代码量快速增长，需要面向对象编程
** JVM将各平台的硬件差异封装起来了，这是跨平台的重要基础
** JVM引入内存管理，大大减轻程序员的负担
** 生来就是面向对象语言，语法简单明了易于学习，避免了指针的使用，但有些冗余，不够精炼
** 从编码->移植->编译->安装包(机器码)->执行的生产链发展为编码->编译->字节码->JVM->机器指令->执行的生产链中将与人参与的环节简单化，人性化，以提高整体链条的效率，是java成功的重要原因，也是很多技术发展变迁的源动力


* 强引用、软引用、弱引用、幻象引用的区别
** 主要体现在对象的可达性(reachable)状态和对垃圾回收的影响
** 强引用，常见的对象引用，超出了作用域或者显示赋值为null，就可以被垃圾回收了
** 软引用，当JVM内存不足时，会清除软引用指向的对象，常用于实现内存敏感的缓存，内存足够的时候缓存，不够的时候清除
** 弱引用， 当GC触发时会立即被回收，仅提供一种访问对象的途径，异步操作callback常用，防止内存泄漏，同样也是缓存的实现选择
** 幻象引用，不能通过它访问对象，get总是返回null，仅仅提供了一种确保对象被finalize以后，执行某种操作的机会，比如post-mortem清理机制


* Exception和Error的区别
** Exception和Error都继承了Throwable类，只有Throwable才能被throw或者catch
** Error是出现了严重的错误导致JVM处于非正常状态、不可恢复状态，常见的有OutOfMemoryError，NoClassDefFoundError等
** Exception分为checked Exception和unchecked Exception(RuntimeException)，可检查异常必须显示捕获处理，使程序恢复运行流程，不检查异常即运行时异常，一般有程序员错误导致
** try-with-resource用于关闭资源
** try-catch-finally 不推诿和延时异常的处理，不生吞异常，finally用于关闭资源和释放锁等，finally是一定会执行的代码块，注意和return、continue、break跳转语句的使用，finally应避免覆盖try中返回值
   
* String、StringBuffer和StringBuilder的区别
** String是final class，所有属性也是final的，属于典型的Immutable类，由于它的不可变性，类似拼接、裁剪等操作都会产生新的String对象
** StringBuffer为了解决中间字符串的问题而生，使用append和add可以将字符串添加到已有序列的末尾或者指定位置，同时保证线程安全，通过将修改数据的方法加上synchronized实现，也会带来额外的性能开销
** StringBuilder功能上和StringBuffer一样，但去掉了线程安全的部分，减少了性能开销
** StringBuilder和StringBuffer都是继承自AbstractStringBuilder，区别就是修改数据的方法是否加了synchronized，数据是char[]，默认初始值是16，如果可以预计拼接的字符大小，应该提前指定，可以避免arraycopy
** 字符串通常都会占用很多内存，所以引入了字符串常量池，创建一个字符串时先判断池中是否已有相同字符串对象，有则使用池中对象，没有则创建字符串并放入池中，注意一下区别：
   - String str = "abc";// 通过直接量赋值方式，放入常量池
   - String str1 = "abc";
   - String str2 = new String("abc");// 通过new方式赋值，不放入常量池
   - String str3 = new String("abcd");
   - System.out.println(str == str1);// true
   - System.out.println(str1 == "abc");// true
   - System.out.println(str2 == "abc");// false
   - System.out.println(str1 == str2);// false
   - System.out.println(str1.equals(str2));// true
   - System.out.println(str1 == str2.intern());// true
   - System.out.println(str2 == str2.intern());// false
   - System.out.println(str3 == str3.intern());// false
   - System.out.println(str1.hashCode() == str2.hashCode());// true
** intern()会检查常量池中是否有equals的字符串，有则返回池中对象，没有则放入池中，并返回池中对象
** JDK 8中字符串拼接操作会自动被javac转换成StringBuilder操作
** Java中的char是两个bytes大小
